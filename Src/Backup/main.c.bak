/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2018 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "i2c.h"
#include "rtc.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "FT810.h"

#include "UART_Usr.h"
    
#include "filesystem.h"

#include "exeptions.h"
    
#include "oled.h"

#include "Inits.h"

#include "test_filesystem.h"

#include <string.h>

extern RTC_HandleTypeDef hrtc;
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

//All the offset of registers are based on the address RAM_REG (0x302000)  
uint8_t  K1[16]={0x07,0x07,0x07,0x55,0x30,0x20,0x00,0x55,0x55,7,7,7,7,7,7}; 
uint8_t extern K2[16]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4f,9,10,11,12,13,14,15};
uint16_t count;


extern TIM_HandleTypeDef htim15;

extern SPI_HandleTypeDef hspi3;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
static void ft800cmdWrite(unsigned char);
void RTC_init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t buff[] = {0x01, 0x07, 0xE2, 0x41};

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_ADC2_Init();
  MX_I2C2_Init();
  MX_SPI1_Init();
  MX_SPI3_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_TIM15_Init();
  MX_UART4_Init();
  MX_UART5_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  
  
    HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_4);// VBD_CNTRL ON питание внешних БД вкл.
    HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_1);// CC_CNTRL ON заряд АКБ от USB вкл.
  
    //HAL_GPIO_WritePin( NKILL_GPIO_Port, NKILL_Pin,  GPIO_PIN_SET);        //Поддержка включенного состояния LTC2955
    HAL_GPIO_WritePin( CHRG_LED_GPIO_Port,  CHRG_LED_Pin,  GPIO_PIN_RESET);
    HAL_GPIO_WritePin( ALRM_L1_GPIO_Port,  ALRM_L1_Pin,  GPIO_PIN_RESET);
//ALRM_L1_Pin GPIO_PIN_0 ALRM_L1_GPIO_Port GPIOE
//CMD_REGREAD(0xffffff19) 0xC0000 0x302000
//Host Memory Read 00   Host Memory Write 0x80
    
//uint16_t Size=4;
#define CMD_REGREAD 0xffffff19
#define REG_BASE 0x302000


         HAL_GPIO_WritePin( CSN_EVE_GPIO_Port,  CSN_EVE_Pin,  GPIO_PIN_SET); 
         HAL_GPIO_WritePin( PD_N_GPIO_Port,  PD_N_Pin,  GPIO_PIN_SET);
HAL_Delay(20);	
         HAL_GPIO_WritePin( PD_N_GPIO_Port,  PD_N_Pin,  GPIO_PIN_RESET); 
HAL_Delay(20); 
         HAL_GPIO_WritePin( PD_N_GPIO_Port,  PD_N_Pin,  GPIO_PIN_SET);
HAL_Delay(20);        


      HAL_GPIO_WritePin( CSN_EVE_GPIO_Port,  CSN_EVE_Pin,  GPIO_PIN_RESET);
      HAL_GPIO_WritePin( OLED_ON_GPIO_Port,  OLED_ON_Pin,  GPIO_PIN_RESET); 
        ft800cmdWrite(FT800_ACTIVE);
      HAL_GPIO_WritePin( CSN_EVE_GPIO_Port,  CSN_EVE_Pin,  GPIO_PIN_SET); 
HAL_Delay(320);


     EEPROM_Init(&EEPROMControl, &hspi3, WP_AT45_GPIO_Port, CS_AT45_GPIO_Port, WP_AT45_Pin, CS_AT45_Pin);
     filesystem_Init(&filesystem, &EEPROMControl);
     //Init_Test(&fileBuffers);
     oledInit();
     info();
     //filesystem_format_filetable(&filesystem, 1);
     filesystem_check_and_restore(&filesystem);
     BD_init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    
      //Test_FileWrite(&fileBuffers, &filesystem);
//    CSN_EVE_Pin GPIO_PIN_4 CSN_EVE_GPIO_Port GPIOC
//HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout) 
//HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout) 
      HAL_GPIO_WritePin( CSN_EVE_GPIO_Port,  CSN_EVE_Pin,  GPIO_PIN_RESET);   
      HAL_SPI_Transmit(&hspi1,  K1+4,  1,  0);
      HAL_SPI_Transmit(&hspi1,  K1+5,  1,  0);
      HAL_SPI_Transmit(&hspi1,  K1+6,  1,  0);
      HAL_SPI_Transmit(&hspi1,  K1+7,  1,  0);
      HAL_SPI_Receive(&hspi1,  K2,  1,  0); 
      HAL_SPI_Receive(&hspi1,  K2+1,  1,  0);
      HAL_SPI_Receive(&hspi1,  K2+2,  1,  0);
      HAL_SPI_Receive(&hspi1,  K2+3,  1,  0);
      HAL_GPIO_WritePin( CSN_EVE_GPIO_Port,  CSN_EVE_Pin,  GPIO_PIN_SET);
      //HAL_Delay(20);      

      controlFuncs();
      
      //oledControl();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_4);
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
/******************************************************************************
 * Function:        void ft800cmdWrite(ftCommand)
 * PreCondition:    None
 * Input:           ftCommand
 * Output:          None
 * Side Effects:    None
 * Overview:        Sends FT800 command
 * Note:            None
 *****************************************************************************/
void ft800cmdWrite(unsigned char ftCommand)
{
	unsigned char cZero = 0x00;														// Filler value for command
      HAL_GPIO_WritePin( CSN_EVE_GPIO_Port,  CSN_EVE_Pin,  GPIO_PIN_RESET);  // Set chip select low 
HAL_SPI_Transmit(&hspi1,  &ftCommand,  1,  0);


	HAL_SPI_Transmit(&hspi1, &ftCommand, 1, 0);						// Send command
	HAL_SPI_Transmit(&hspi1, &cZero, 1, 0);								// Send first filler byte
	HAL_SPI_Transmit(&hspi1, &cZero, 1, 0);								// Send second filler byte
      HAL_GPIO_WritePin( CSN_EVE_GPIO_Port,  CSN_EVE_Pin,  GPIO_PIN_SET);       // Set chip select high
}

void RTC_init(void)
{
            
                HAL_PWR_EnableBkUpAccess();
              __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
              //__HAL_RCC_RTC_ENABLE();
              
              MX_RTC_Init();
}

//******************************************************************************

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  
  exception("","",0,"HAL error.");
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
